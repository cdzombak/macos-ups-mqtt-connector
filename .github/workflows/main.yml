---
name: CI

"on":
  push:
    branches:
      - "main"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - "main"

permissions:
  contents: read

jobs:
  meta:
    name: Derive Build Metadata
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Derive version string
        id: bin_version
        run: echo "bin_version=$(./.version.sh)" >> "$GITHUB_OUTPUT"
      - name: bin_version
        run: "echo bin_version: ${{ steps.bin_version.outputs.bin_version }}"
      - name: Check if this is a running version tag update
        id: running_version_tag
        run: |
          if [ -z "${{ github.event.ref }}" ]; then
              echo "is_running_version_tag_update=false" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.event.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+$ ]]; then
              echo "is_running_version_tag_update=true" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.event.ref }}" =~ ^refs/tags/v[0-9]+$ ]]; then
              echo "is_running_version_tag_update=true" >> "$GITHUB_OUTPUT"
          else
              echo "is_running_version_tag_update=false" >> "$GITHUB_OUTPUT"
          fi
      - name: is_running_version_tag
        run: "echo is_running_version_tag_update: ${{ steps.running_version_tag.outputs.is_running_version_tag_update }}"
    outputs:
      # nb. homebrew-releaser assumes the program name is == the repository name
      bin_name: ${{ github.event.repository.name }}
      bin_version: ${{ steps.bin_version.outputs.bin_version }}
      brewtap_owner: ${{ github.repository_owner }}
      brewtap_name: oss
      brewtap_formula_dir: formula
      is_prerelease: >-
        ${{
          steps.running_version_tag.outputs.is_running_version_tag_update != 'true' &&
          startsWith(github.ref, 'refs/tags/v') &&
            (contains(github.ref, '-alpha.')
            || contains(github.ref, '-beta.')
            || contains(github.ref, '-rc.'))
        }}
      is_release: >-
        ${{
          steps.running_version_tag.outputs.is_running_version_tag_update != 'true' &&
          startsWith(github.ref, 'refs/tags/v') &&
            !(contains(github.ref, '-alpha.')
            || contains(github.ref, '-beta.')
            || contains(github.ref, '-rc.'))
        }}
      is_pull_request: ${{ github.event_name == 'pull_request' }}
      is_running_version_tag_update: ${{ steps.running_version_tag.outputs.is_running_version_tag_update }}

  binaries:
    name: Binaries
    needs: [meta]
    if: needs.meta.outputs.is_running_version_tag_update != 'true'
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build binaries
        run: make all
      - name: Sign binary
        if: >-
          needs.meta.outputs.is_release == 'true' ||
          needs.meta.outputs.is_prerelease == 'true'
        working-directory: out/
        env:
          DEVID_SIGNING_CERT_BASE64: ${{ secrets.DEVID_SIGNING_CERT }}
          DEVID_SIGNING_CERT_PASS: ${{ secrets.DEVID_SIGNING_CERT_PASS }}
          DEVID_SIGNING_CERT_ID: ${{ secrets.DEVID_SIGNING_CERT_ID }}
          KEYCHAIN_PASS: ${{ secrets.KEYCHAIN_PASS }}
        run: |
          security create-keychain -p "$KEYCHAIN_PASS" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASS" build.keychain
          echo "$DEVID_SIGNING_CERT_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$DEVID_SIGNING_CERT_PASS" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASS" build.keychain
          /usr/bin/codesign --force --timestamp --options=runtime -s "$DEVID_SIGNING_CERT_ID" ./${{ needs.meta.outputs.bin_name }}-${{ needs.meta.outputs.bin_version }} -v
      - name: Prepare release artifacts
        id: prepare_artifacts
        working-directory: out/
        run: |
          mkdir ./gh-release
          find . -name '${{ needs.meta.outputs.bin_name }}-*' -type f -maxdepth 1 -print0 | \
            xargs -0 -I {} gtar --transform='flags=r;s|.*|${{ needs.meta.outputs.bin_name }}|' -czvf ./gh-release/{}-all.tar.gz {}
          echo "tgz_sha256_allarch=$(shasum -a 256 ./gh-release/${{ needs.meta.outputs.bin_name }}-${{ needs.meta.outputs.bin_version }}-all.tar.gz  | cut -d " " -f 1)" >> "$GITHUB_OUTPUT"
      - name: Create .dmg for notarization
        if: >-
          needs.meta.outputs.is_release == 'true' ||
          needs.meta.outputs.is_prerelease == 'true'
        working-directory: out/
        run: |
          mkdir ./.dmg-src
          xattr -cr ./.dmg-src
          cp ${{ needs.meta.outputs.bin_name }}-${{ needs.meta.outputs.bin_version }} ./.dmg-src/
          hdiutil create -srcfolder ./.dmg-src \
            -fs "HFS+" \
            -volname "${{ needs.meta.outputs.bin_name }}-${{ needs.meta.outputs.bin_version }}" \
            ./${{ needs.meta.outputs.bin_name }}-${{ needs.meta.outputs.bin_version }}.dmg
          hdiutil verify ./${{ needs.meta.outputs.bin_name }}-${{ needs.meta.outputs.bin_version }}.dmg
      - name: Notarize .dmg
        if: >-
          needs.meta.outputs.is_release == 'true' ||
          needs.meta.outputs.is_prerelease == 'true'
        working-directory: out/
        env:
          NOTARIZATION_APPLE_ID: ${{ secrets.NOTARIZATION_APPLE_ID }}
          NOTARIZATION_TEAM_ID: ${{ secrets.NOTARIZATION_TEAM_ID }}
          NOTARIZATION_PASS: ${{ secrets.NOTARIZATION_PASS }}
        run: |
          xcrun notarytool store-credentials "notarytool-profile" \
            --apple-id "$NOTARIZATION_APPLE_ID" \
            --team-id "$NOTARIZATION_TEAM_ID" \
            --password "$NOTARIZATION_PASS"
          xcrun notarytool submit ./${{ needs.meta.outputs.bin_name }}-${{ needs.meta.outputs.bin_version }}.dmg --keychain-profile "notarytool-profile" --wait
          xcrun stapler staple ./${{ needs.meta.outputs.bin_name }}-${{ needs.meta.outputs.bin_version }}.dmg
      - name: Upload notarized .dmg artifact
        if: >-
          needs.meta.outputs.is_release == 'true' ||
          needs.meta.outputs.is_prerelease == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.meta.outputs.bin_name }}-${{ needs.meta.outputs.bin_version }}.dmg
          path: out/${{ needs.meta.outputs.bin_name }}-${{ needs.meta.outputs.bin_version }}.dmg
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.meta.outputs.bin_name }} Binary Artifacts
          path: out/gh-release/*

    outputs:
      tgz_sha256_allarch: ${{ steps.prepare_artifacts.outputs.tgz_sha256_allarch }}

  release:
    name: GitHub (Pre)Release
    needs: [meta, binaries]
    if: >-
      needs.meta.outputs.is_release == 'true' ||
      needs.meta.outputs.is_prerelease == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download binaries & packages
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.meta.outputs.bin_name }} Binary Artifacts
          path: out
      - name: Download notarized .dmg artifact
        if: >-
          needs.meta.outputs.is_release == 'true' ||
          needs.meta.outputs.is_prerelease == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.meta.outputs.bin_name }}-${{ needs.meta.outputs.bin_version }}.dmg
          path: out-dmg
      - name: List artifacts
        working-directory: out
        run: ls -R
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            out/${{ needs.meta.outputs.bin_name }}-*
            out-dmg/${{ needs.meta.outputs.bin_name }}-*.dmg
          prerelease: ${{ needs.meta.outputs.is_prerelease == 'true' }}
          fail_on_unmatched_files: true
          generate_release_notes: true

  tags:
    name: Update Release Tags
    needs: [meta, release]
    if: needs.meta.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Update running major/minor version tags
        uses: sersoft-gmbh/running-release-tags-action@v3
        with:
          fail-on-non-semver-tag: true
          create-release: false
          update-full-release: false

  homebrew:
    name: Update Homebrew Tap
    needs: [meta, binaries]
    if: needs.meta.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repo
        uses: actions/checkout@v4
        with:
          path: src

      - name: Checkout ${{ needs.meta.outputs.brewtap_owner }}/${{ needs.meta.outputs.brewtap_name }} tap repo
        uses: actions/checkout@v4
        with:
          path: brewtap
          repository: ${{ needs.meta.outputs.brewtap_owner }}/homebrew-${{ needs.meta.outputs.brewtap_name }}
          token: ${{ secrets.HOMEBREW_RELEASER_PAT }}

      - name: Generate formula file
        run: |
          env \
            FORMULA_VERSION_NO_V="${{ needs.meta.outputs.bin_version }}" \
            FORMULA_TGZ_SHA256="${{ needs.binaries.outputs.tgz_sha256_allarch }}" \
            ./src/.formula.sh > ./brewtap/${{ needs.meta.outputs.brewtap_formula_dir }}/${{ needs.meta.outputs.bin_name }}.rb

      - name: Commit and push to tap
        uses: EndBug/add-and-commit@v9
        with:
          cwd: ./brewtap
          add: "./${{ needs.meta.outputs.brewtap_formula_dir }}/${{ needs.meta.outputs.bin_name }}.rb"
          author_name: homebrew-releaser-bot
          author_email: homebrew-releaser-bot@users.noreply.github.com
          message: "Add ${{ needs.meta.outputs.bin_name }} v${{ needs.meta.outputs.bin_version }}"
          pathspec_error_handling: exitImmediately
          push: true
          github_token: ${{ secrets.HOMEBREW_RELEASER_PAT }}

  ntfy:
    name: Ntfy
    runs-on: ubuntu-latest
    needs: [meta, binaries, release, homebrew]
    if: ${{ !cancelled() && (needs.meta.outputs.is_release == 'true' || needs.meta.outputs.is_prerelease == 'true') }}
    steps:
      - name: Send success notification
        uses: niniyas/ntfy-action@master
        if: ${{ !contains(needs.*.result, 'failure') }}
        with:
          url: "https://ntfy.cdzombak.net"
          topic: "gha-builds"
          priority: 3
          headers: '{"authorization": "Bearer ${{ secrets.NTFY_TOKEN }}"}'
          tags: white_check_mark
          title: ${{ github.event.repository.name }} ${{ needs.meta.outputs.bin_version }} available
          details: ${{ github.event.repository.name }} version ${{ needs.meta.outputs.bin_version }} is now available.
      - name: Send failure notification
        uses: niniyas/ntfy-action@master
        if: ${{ contains(needs.*.result, 'failure') }}
        with:
          url: "https://ntfy.cdzombak.net"
          topic: "gha-builds"
          priority: 3
          headers: '{"authorization": "Bearer ${{ secrets.NTFY_TOKEN }}"}'
          tags: no_entry
          title: ${{ github.event.repository.name }} ${{ needs.meta.outputs.bin_version }} build failed
          details: Build failed for ${{ github.event.repository.name }} version ${{ needs.meta.outputs.bin_version }}.
